@page "/sudoku"
@using SudokuBlaze.Data
@using System.Timers

@inject GameService Game

<h3>Sudoku</h3>

<p>Difficulty: @Game.Difficulty</p>

<p>Time: @Game.ElapsedTime</p>

<h2 class="win-text"
	hidden="@(!Game.GameWon || !_isInitialized)">
	Well done! 🤩
</h2>


<div class="outer-grid">
	@for (int outerRow = 0; outerRow < 3; outerRow++)
	{
		@for (int outerColumn = 0; outerColumn < 3; outerColumn++)
		{
			InnerGrid grid = _grid[outerRow, outerColumn];
			<div class="inner-grid @(_isInitialized ? "" : "loading") @(Game.GameWon ? "game-won" : "")">

				@for (int innerRow = 0; innerRow < 3; innerRow++)
				{
					@for (int innerColumn = 0; innerColumn < 3; innerColumn++)
					{
						Cell cell = grid.GetCell(innerRow, innerColumn);
						<input
							type="number"
							class="@cell.Classes"
							value="@(cell.Value == 0 ? "" : cell.Value)"
							@onchange="(input) => UpdateCellValue(cell, input.Value)"
							max="9"
							min="0"
							disabled="@(cell.IsDisabled || !_isInitialized || Game.GameWon)"/>
					}
				}
			</div>
		}
	}
</div>

<button
	@onclick="StartNewGame"
	disabled="@(!_isInitialized)">
	<icon class="oi @(_isInitialized ? "oi-reload" : "oi-action-redo")" />
	New Game
</button>

<button
	@onclick="async () => { Game.GetHint(); await StateChanged(); }"
	disabled="@(!_isInitialized || Game.GameWon)">
	Hint
</button>

<form>
	<label for="difficulty">Difficulty:</label>
	<select name="difficulty" id="difficulty" 
			@onchange="(args) => _selectedDifficulty = (string)args.Value">
		<option value="Random" selected="@true">Random</option>
		<option value="Easy">Easy</option>
		<option value="Medium">Medium</option>
		<option value="Hard">Hard</option>
	</select>

	<p hidden="@(_selectedDifficulty != "Easy")">
		<icon class="oi oi-warning" />
		This may take a few tries
	</p>
</form>

@code {
	private InnerGrid[,] _grid = new InnerGrid[3, 3];
	private bool _isInitialized;
	private string _selectedDifficulty = "Random";
	private readonly Timer _timer = new(TimeSpan.FromSeconds(1));

	protected override async Task OnInitializedAsync()
	{
		_timer.Elapsed += async (_, _) => await StateChanged();
		_grid = Game.Grid;
		await StartNewGame();
	}

	private async Task StartNewGame()
	{
		_isInitialized = false;

		Game.ClearGame();
		await StateChanged();

		_timer.Start();

		await Game.StartNewGame(_selectedDifficulty);
		_isInitialized = true;
		await StateChanged();
	}

	private async void UpdateCellValue(Cell cell, object value)
	{
		int.TryParse((string)value, out int val);
		val %= 10;
		cell.SetValue(val);
		if (Game.GameWon) Game.StopTimer();
		await StateChanged(cell);
	}

	private async Task StateChanged(Cell cell = null)
	{
		if (Game.GameWon && Game.TimerRunning)
		{
			Game.StopTimer();
			_timer.Stop();
		}

		// Makes sure the fields value is updated
		if (cell is not null && cell.Value == 0)
		{
			cell.SetValue(1);
			await InvokeAsync(StateHasChanged);
			cell.SetValue(0);
		}
		await InvokeAsync(StateHasChanged);
	}
}
